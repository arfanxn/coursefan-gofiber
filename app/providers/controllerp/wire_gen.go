// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package controllerp

import (
	"github.com/arfanxn/coursefan-gofiber/app/http/controllers"
	"github.com/arfanxn/coursefan-gofiber/app/policies"
	"github.com/arfanxn/coursefan-gofiber/app/repositories"
	"github.com/arfanxn/coursefan-gofiber/app/services"
	"gorm.io/gorm"
)

// Injectors from injector.go:

func InitUserController(db *gorm.DB) *controllers.UserController {
	permissionRepository := repositories.NewPermissionRepository(db)
	userPolicy := policies.NewUserPolicy(permissionRepository)
	userRepository := repositories.NewUserRepository(db)
	mediaRepository := repositories.NewMediaRepository(db)
	userProfileRepository := repositories.NewUserProfileRepository(db)
	userService := services.NewUserService(userRepository, mediaRepository, userProfileRepository)
	userController := controllers.NewUserController(userPolicy, userService)
	return userController
}

func InitUserSettingController(db *gorm.DB) *controllers.UserSettingController {
	permissionRepository := repositories.NewPermissionRepository(db)
	userSettingPolicy := policies.NewUserSettingPolicy(permissionRepository)
	userSettingRepository := repositories.NewUserSettingRepository(db)
	userSettingService := services.NewUserSettingService(userSettingRepository)
	userSettingController := controllers.NewUserSettingController(userSettingPolicy, userSettingService)
	return userSettingController
}

func InitAuthController(db *gorm.DB) *controllers.AuthController {
	userRepository := repositories.NewUserRepository(db)
	mediaRepository := repositories.NewMediaRepository(db)
	tokenRepository := repositories.NewTokenRepository(db)
	authService := services.NewAuthService(userRepository, mediaRepository, tokenRepository)
	authController := controllers.NewAuthController(authService)
	return authController
}

func InitWalletController(db *gorm.DB) *controllers.WalletController {
	permissionRepository := repositories.NewPermissionRepository(db)
	walletPolicy := policies.NewWalletPolicy(permissionRepository)
	walletRepository := repositories.NewWalletRepository(db)
	walletService := services.NewWalletService(walletRepository)
	walletController := controllers.NewWalletController(walletPolicy, walletService)
	return walletController
}

func InitTransactionController(db *gorm.DB) *controllers.TransactionController {
	permissionRepository := repositories.NewPermissionRepository(db)
	transactionPolicy := policies.NewTransactionPolicy(permissionRepository)
	transactionRepository := repositories.NewTransactionRepository(db)
	transactionService := services.NewTransactionService(transactionRepository)
	transactionController := controllers.NewTransactionController(transactionPolicy, transactionService)
	return transactionController
}

func InitNotificationController(db *gorm.DB) *controllers.NotificationController {
	permissionRepository := repositories.NewPermissionRepository(db)
	notificationPolicy := policies.NewNotificationPolicy(permissionRepository)
	notificationRepository := repositories.NewNotificationRepository(db)
	notificationService := services.NewNotificationService(notificationRepository)
	notificationController := controllers.NewNotificationController(notificationPolicy, notificationService)
	return notificationController
}

func InitCourseController(db *gorm.DB) *controllers.CourseController {
	permissionRepository := repositories.NewPermissionRepository(db)
	coursePolicy := policies.NewCoursePolicy(permissionRepository)
	courseRepository := repositories.NewCourseRepository(db)
	courseUserRoleRepository := repositories.NewCourseUserRoleRepository(db)
	roleRepository := repositories.NewRoleRepository(db)
	courseService := services.NewCourseService(courseRepository, courseUserRoleRepository, roleRepository)
	courseController := controllers.NewCourseController(coursePolicy, courseService)
	return courseController
}

func InitCourseOrderController(db *gorm.DB) *controllers.CourseOrderController {
	permissionRepository := repositories.NewPermissionRepository(db)
	courseOrderPolicy := policies.NewCourseOrderPolicy(permissionRepository)
	courseOrderRepository := repositories.NewCourseOrderRepository(db)
	courseRepository := repositories.NewCourseRepository(db)
	courseOrderService := services.NewCourseOrderService(courseOrderRepository, courseRepository)
	courseOrderController := controllers.NewCourseOrderController(courseOrderPolicy, courseOrderService)
	return courseOrderController
}

func InitLecturePartController(db *gorm.DB) *controllers.LecturePartController {
	permissionRepository := repositories.NewPermissionRepository(db)
	lecturePartPolicy := policies.NewLecturePartPolicy(permissionRepository)
	lecturePartRepository := repositories.NewLecturePartRepository(db)
	lecturePartService := services.NewLecturePartService(lecturePartRepository)
	lecturePartController := controllers.NewLecturePartController(lecturePartPolicy, lecturePartService)
	return lecturePartController
}

func InitLectureController(db *gorm.DB) *controllers.LectureController {
	permissionRepository := repositories.NewPermissionRepository(db)
	lecturePolicy := policies.NewLecturePolicy(permissionRepository)
	lectureRepository := repositories.NewLectureRepository(db)
	mediaRepository := repositories.NewMediaRepository(db)
	lectureService := services.NewLectureService(lectureRepository, mediaRepository)
	lectureController := controllers.NewLectureController(lecturePolicy, lectureService)
	return lectureController
}

func InitReviewController(db *gorm.DB) *controllers.ReviewController {
	permissionRepository := repositories.NewPermissionRepository(db)
	reviewPolicy := policies.NewReviewPolicy(permissionRepository)
	reviewRepository := repositories.NewReviewRepository(db)
	reviewService := services.NewReviewService(reviewRepository)
	reviewController := controllers.NewReviewController(reviewPolicy, reviewService)
	return reviewController
}

func InitDiscussionController(db *gorm.DB) *controllers.DiscussionController {
	permissionRepository := repositories.NewPermissionRepository(db)
	discussionPolicy := policies.NewDiscussionPolicy(permissionRepository)
	discussionRepository := repositories.NewDiscussionRepository(db)
	discussionService := services.NewDiscussionService(discussionRepository)
	discussionController := controllers.NewDiscussionController(discussionPolicy, discussionService)
	return discussionController
}
